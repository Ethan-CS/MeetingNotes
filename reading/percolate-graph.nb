* Source: Adapted from Szabolcs HorvÃ¡t, Mathematica Stack Exchange Answer: mathematica.stackexchange.com/a/5173 October 2017*

* Create sample dataset *
points = RandomReal[10 {-1, 1}, {200, 2}];

ListPlot[pts, AspectRatio -> Automatic, 
 Epilog -> {Red, Point[pts[[63]]], Point[pts[[90]]]}]

* Define distance matrix between points *
dst = Outer[EuclideanDistance, pts, pts, 1]; // Timing

* Set of possible edges in graph, sorted by length *
edges = Subsets[Range@Length[pts], {2}];
edges = SortBy[edges, Extract[dst, #] &];

* Index furthest left and right vertices as start and end *
start = First@Ordering[pts[[All, 1]], 1];
end = First@Ordering[pts[[All, 1]], -1];

* Get minimal length edge that we need to include *
idx = Module[{f}, Do[Set @@ f /@ (edges[[i]]);
   If[f[start] === f[end], Return[i]], {i, Length[edges]}]]

Extract[dst, edges[[idx]]]

* Manipulate to add edges one by one in increasing
   length until we have percolation threshold *
Manipulate[
 HighlightGraph[
  Graph[Range@Length@pts, UndirectedEdge @@@ Take[edges, i], 
   VertexCoordinates -> pts], {start, end}], {i, 1, idx, 1}]
